Para poder trabajar con el proyecto, al clonarlo debe ejecutar 'dotnet restore' para bajar los paquetes nuget necesarios, en caso de errores limpiar la solucion primero antes de ejecutar la aplicacion

- Entity Framework
- Unity y Unity.Mvc5

Unity para ejecutar la inyeccion de dependencias (no olvides agregar el RegisterComponents generado por Unity en ApplicationStart)

üîß 1. Configuraci√≥n Inicial del Proyecto
Paso 1: Crear la soluci√≥n
Crea una soluci√≥n vac√≠a en Visual Studio 2022:

Nombre de la soluci√≥n: Portal

Tipo de proyecto: Empty Solution

Paso 2: Crear los proyectos seg√∫n la Onion Architecture
Dentro de la soluci√≥n crea los siguientes proyectos:

Capa	Proyecto	Tipo de Proyecto
Dominio	Portal.Domain	Class Library (.NET Framework)
Aplicaci√≥n	Portal.Application	Class Library (.NET Framework)
Infraestructura	Portal.Infrastructure	Class Library (.NET Framework)
Web (UI)	Portal.Web	ASP.NET MVC (.NET Framework 4.8)
Datos (EF)	Portal.Infrastructure.Data	Class Library (.NET Framework)
Inyecci√≥n	Portal.Infrastructure.IoC	Class Library (.NET Framework)

Recomendaci√≥n: Usa carpetas dentro de cada proyecto para organizar entidades, interfaces, servicios, etc.

üì¶ 2. Instalaci√≥n de Paquetes NuGet
En Portal.Infrastructure.Data
bash
Copiar
Editar
Install-Package EntityFramework
En Portal.Infrastructure.IoC
bash
Copiar
Editar
Install-Package Unity
Install-Package Unity.Mvc
En Portal.Web
bash
Copiar
Editar
Install-Package Unity.Mvc
Install-Package Microsoft.AspNet.Mvc
Install-Package jQuery
Install-Package bootstrap
üèõÔ∏è 3. Dise√±o de la Entidad Rol (Capa Dominio)
En Portal.Domain/Entities/Rol.cs
csharp
Copiar
Editar
namespace Portal.Domain.Entities
{
    public class Rol
    {
        public int Id { get; set; }
        public string Nombre { get; set; }
        public string Descripcion { get; set; }
    }
}
üß© 4. Interfaces de Repositorio (Dominio)
En Portal.Domain/Interfaces/IRepository.cs
csharp
Copiar
Editar
using System.Collections.Generic;

namespace Portal.Domain.Interfaces
{
    public interface IRepository<T> where T : class
    {
        T GetById(int id);
        IEnumerable<T> GetAll();
        void Insert(T entity);
        void Update(T entity);
        void Delete(T entity);
        void Save();
    }
}
En Portal.Domain/Interfaces/IRolRepository.cs
csharp
Copiar
Editar
using Portal.Domain.Entities;

namespace Portal.Domain.Interfaces
{
    public interface IRolRepository : IRepository<Rol>
    {
        // M√©todos adicionales espec√≠ficos de Rol
    }
}
üóÉÔ∏è 5. Implementaci√≥n del Repositorio (Infraestructura)
En Portal.Infrastructure.Data/Context/PortalDbContext.cs
csharp
Copiar
Editar
using System.Data.Entity;
using Portal.Domain.Entities;

namespace Portal.Infrastructure.Data.Context
{
    public class PortalDbContext : DbContext
    {
        public PortalDbContext() : base("name=PortalConnection") { }

        public DbSet<Rol> Roles { get; set; }
    }
}
En Portal.Infrastructure.Data/Repositories/RolRepository.cs
csharp
Copiar
Editar
using Portal.Domain.Entities;
using Portal.Domain.Interfaces;
using Portal.Infrastructure.Data.Context;
using System.Collections.Generic;
using System.Linq;

namespace Portal.Infrastructure.Data.Repositories
{
    public class RolRepository : IRolRepository
    {
        private readonly PortalDbContext _context;

        public RolRepository(PortalDbContext context)
        {
            _context = context;
        }

        public void Delete(Rol entity) => _context.Roles.Remove(entity);
        public IEnumerable<Rol> GetAll() => _context.Roles.ToList();
        public Rol GetById(int id) => _context.Roles.Find(id);
        public void Insert(Rol entity) => _context.Roles.Add(entity);
        public void Update(Rol entity) => _context.Entry(entity).State = System.Data.Entity.EntityState.Modified;
        public void Save() => _context.SaveChanges();
    }
}
üß† 6. L√≥gica de Aplicaci√≥n
En Portal.Application/Services/RolService.cs
csharp
Copiar
Editar
using Portal.Domain.Entities;
using Portal.Domain.Interfaces;
using System.Collections.Generic;

namespace Portal.Application.Services
{
    public class RolService
    {
        private readonly IRolRepository _rolRepository;

        public RolService(IRolRepository rolRepository)
        {
            _rolRepository = rolRepository;
        }

        public IEnumerable<Rol> GetAllRoles() => _rolRepository.GetAll();
        public Rol GetRol(int id) => _rolRepository.GetById(id);
        public void CreateRol(Rol rol)
        {
            _rolRepository.Insert(rol);
            _rolRepository.Save();
        }

        public void UpdateRol(Rol rol)
        {
            _rolRepository.Update(rol);
            _rolRepository.Save();
        }

        public void DeleteRol(int id)
        {
            var rol = _rolRepository.GetById(id);
            _rolRepository.Delete(rol);
            _rolRepository.Save();
        }
    }
}
üîÑ 7. Inyecci√≥n de Dependencias (Unity)
En Portal.Infrastructure.IoC/DependencyContainer.cs
csharp
Copiar
Editar
using Microsoft.Practices.Unity;
using Portal.Application.Services;
using Portal.Domain.Interfaces;
using Portal.Infrastructure.Data.Repositories;

namespace Portal.Infrastructure.IoC
{
    public static class DependencyContainer
    {
        public static void RegisterTypes(IUnityContainer container)
        {
            container.RegisterType<IRolRepository, RolRepository>();
            container.RegisterType<RolService>();
        }
    }
}
En Portal.Web/Global.asax.cs
csharp
Copiar
Editar
using Portal.Infrastructure.IoC;
using System.Web.Mvc;
using Unity;
using Unity.Mvc5;

protected void Application_Start()
{
    var container = new UnityContainer();
    DependencyContainer.RegisterTypes(container);
    DependencyResolver.SetResolver(new UnityDependencyResolver(container));
    
    AreaRegistration.RegisterAllAreas();
    RouteConfig.RegisterRoutes(RouteTable.Routes);
}
üåê 8. Controlador y Vistas
En Portal.Web/Controllers/RolController.cs
csharp
Copiar
Editar
using Portal.Application.Services;
using Portal.Domain.Entities;
using System.Web.Mvc;

namespace Portal.Web.Controllers
{
    public class RolController : Controller
    {
        private readonly RolService _rolService;

        public RolController(RolService rolService)
        {
            _rolService = rolService;
        }

        public ActionResult Index()
        {
            var roles = _rolService.GetAllRoles();
            return View(roles);
        }

        public ActionResult Create() => View();

        [HttpPost]
        public ActionResult Create(Rol rol)
        {
            if (ModelState.IsValid)
            {
                _rolService.CreateRol(rol);
                return RedirectToAction("Index");
            }
            return View(rol);
        }
    }
}
En Views/Rol/Index.cshtml
html
Copiar
Editar
@model IEnumerable<Portal.Domain.Entities.Rol>

<h2>Roles</h2>
<table class="table table-bordered">
    <thead>
        <tr><th>Id</th><th>Nombre</th><th>Descripci√≥n</th></tr>
    </thead>
    <tbody>
    @foreach (var item in Model)
    {
        <tr>
            <td>@item.Id</td>
            <td>@item.Nombre</td>
            <td>@item.Descripcion</td>
        </tr>
    }
    </tbody>
</table>

<a class="btn btn-primary" href="@Url.Action("Create")">Crear Rol</a>
üìÅ 9. Conexi√≥n a SQL Server
En Web.config del proyecto Web:

xml
Copiar
Editar
<connectionStrings>
  <add name="PortalConnection" 
       connectionString="Server=.\SQLEXPRESS;Database=PortalDb;Trusted_Connection=True;"
       providerName="System.Data.SqlClient"/>
</connectionStrings>
üß™ 10. Migraciones (si deseas usar Code First Migrations)
bash
Copiar
Editar
Enable-Migrations -ProjectName Portal.Infrastructure.Data
Add-Migration InitialCreate
Update-Database


Flujo de trabajo para nuevos m√≥dulos
Dominio: Entidad + interfaz de repositorio

Infraestructura.Data: Contexto EF + repositorio concreto

Application: Servicio de dominio

IoC: Registrar dependencias en DependencyContainer

Web: Controlador MVC + vistas

Configuraci√≥n: Unity + conexiones